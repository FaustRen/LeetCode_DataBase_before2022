

## 208. Implement Trie (Prefix Tree)

### Problem Statement

Implement a trie with `insert`, `search`, and `startsWith` methods.

### Example

```
Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
```

### Explanation

A trie is a tree-like data structure that stores a dynamic set of strings. It is often used to facilitate operations like predictive text or autocomplete features on mobile phones or web search.

The `insert` method adds a word into the trie. The `search` method searches for a word in the trie. The `startsWith` method returns true if there is any word in the trie that starts with the given prefix.

In this problem, we will implement a trie with `insert`, `search`, and `startsWith` methods.

### Input

- `insert(word)`: Inserts a word into the trie.
- `search(word)`: Returns true if the word is in the trie, otherwise returns false.
- `startsWith(prefix)`: Returns true if there is any word in the trie that starts with the given prefix, otherwise returns false.

### Output

- `insert(word)`: None.
- `search(word)`: Returns true if the word is in the trie, otherwise returns false.
- `startsWith(prefix)`: Returns true if there is any word in the trie that starts with the given prefix, otherwise returns false.

### Example

#### Example 1:

```
Input: 
insert("apple")
search("apple")
startsWith("app")

Output: 
None
true
true
```

#### Example 2:

```
Input: 
insert("app")
search("app")

Output: 
None
true
```

```
CREATE TABLE TreeNode (
    id INTEGER PRIMARY KEY AUTO_INCREMENT,
    val INTEGER,
    left_id INTEGER,
    right_id INTEGER,
    FOREIGN KEY (left_id) REFERENCES TreeNode (id),
    FOREIGN KEY (right_id) REFERENCES TreeNode (id)
);
```